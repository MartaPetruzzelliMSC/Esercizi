// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Test0001.Models;

#nullable disable

namespace Test0001.Migrations
{
    [DbContext(typeof(CodeFirstDbContext))]
    [Migration("20251024122231_AddUserRolelMigration")]
    partial class AddUserRolelMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Bookmarks", b =>
                {
                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("MoviesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("Bookmarks");
                });

            modelBuilder.Entity("DirectorsMovies", b =>
                {
                    b.Property<int>("DirectorsId")
                        .HasColumnType("int");

                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.HasKey("DirectorsId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("DirectorsMovies");

                    b.HasData(
                        new
                        {
                            DirectorsId = 1,
                            MoviesId = 6
                        },
                        new
                        {
                            DirectorsId = 2,
                            MoviesId = 6
                        },
                        new
                        {
                            DirectorsId = 1,
                            MoviesId = 7
                        },
                        new
                        {
                            DirectorsId = 2,
                            MoviesId = 7
                        },
                        new
                        {
                            DirectorsId = 3,
                            MoviesId = 1
                        },
                        new
                        {
                            DirectorsId = 5,
                            MoviesId = 2
                        },
                        new
                        {
                            DirectorsId = 6,
                            MoviesId = 3
                        },
                        new
                        {
                            DirectorsId = 4,
                            MoviesId = 4
                        },
                        new
                        {
                            DirectorsId = 7,
                            MoviesId = 5
                        },
                        new
                        {
                            DirectorsId = 8,
                            MoviesId = 5
                        });
                });

            modelBuilder.Entity("Test0001.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(2281),
                            Name = "Fantasy",
                            UpdateDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(2283)
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(2587),
                            Name = "Thriller",
                            UpdateDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(2588)
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(2589),
                            Name = "Comedy",
                            UpdateDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(2590)
                        });
                });

            modelBuilder.Entity("Test0001.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Test0001.Models.Director", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.ToTable("Directors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(4160),
                            Name = "Phil",
                            Surname = "Lord",
                            UpdateDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(4161)
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(4596),
                            Name = "Chris",
                            Surname = "Miller",
                            UpdateDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(4597)
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(4599),
                            Name = "Alfonso",
                            Surname = "Cuaròn",
                            UpdateDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(4599)
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(4600),
                            Name = "Peter",
                            Surname = "Jackson",
                            UpdateDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(4600)
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(4601),
                            Name = "Brad",
                            Surname = "Anderson",
                            UpdateDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(4602)
                        },
                        new
                        {
                            Id = 6,
                            CreationDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(4602),
                            Name = "Massimo",
                            Surname = "Venier",
                            UpdateDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(4603)
                        },
                        new
                        {
                            Id = 7,
                            CreationDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(4604),
                            Name = "Chris",
                            Surname = "Wedge",
                            UpdateDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(4604)
                        },
                        new
                        {
                            Id = 8,
                            CreationDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(4605),
                            Name = "Carlos",
                            Surname = "Saldanha",
                            UpdateDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(4605)
                        });
                });

            modelBuilder.Entity("Test0001.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("smalldatetime");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreationDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(3136),
                            ReleaseDate = new DateOnly(1, 1, 1),
                            Title = "Harry Potter and The Prisoner of Azkaban",
                            UpdateDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(3137)
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CreationDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(3608),
                            ReleaseDate = new DateOnly(1, 1, 1),
                            Title = "Fractured",
                            UpdateDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(3609)
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            CreationDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(3610),
                            ReleaseDate = new DateOnly(1, 1, 1),
                            Title = "Tre uomini e una gamba",
                            UpdateDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(3610)
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CreationDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(3611),
                            ReleaseDate = new DateOnly(1, 1, 1),
                            Title = "The Fellowship of the Ring",
                            UpdateDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(3612)
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            CreationDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(3613),
                            ReleaseDate = new DateOnly(1, 1, 1),
                            Title = "Ice age",
                            UpdateDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(3614)
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            CreationDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(3615),
                            ReleaseDate = new DateOnly(1, 1, 1),
                            Title = "Cloudy with a chance of meatballs",
                            UpdateDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(3615)
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            CreationDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(3616),
                            ReleaseDate = new DateOnly(1, 1, 1),
                            Title = "The LEGO Movie",
                            UpdateDate = new DateTime(2025, 10, 24, 12, 22, 30, 260, DateTimeKind.Utc).AddTicks(3617)
                        });
                });

            modelBuilder.Entity("Test0001.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2025, 10, 24, 12, 22, 30, 259, DateTimeKind.Utc).AddTicks(5378),
                            Email = "marta@example.com",
                            Role = "admin",
                            UpdateDate = new DateTime(2025, 10, 24, 12, 22, 30, 259, DateTimeKind.Utc).AddTicks(5385),
                            Username = "marta"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2025, 10, 24, 12, 22, 30, 259, DateTimeKind.Utc).AddTicks(6359),
                            Email = "claudio@example.com",
                            Role = "guest",
                            UpdateDate = new DateTime(2025, 10, 24, 12, 22, 30, 259, DateTimeKind.Utc).AddTicks(6360),
                            Username = "spazzabilly"
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2025, 10, 24, 12, 22, 30, 259, DateTimeKind.Utc).AddTicks(6362),
                            Email = "abriged@example.com",
                            Role = "guest",
                            UpdateDate = new DateTime(2025, 10, 24, 12, 22, 30, 259, DateTimeKind.Utc).AddTicks(6363),
                            Username = "GiulioAbridged"
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(2025, 10, 24, 12, 22, 30, 259, DateTimeKind.Utc).AddTicks(6364),
                            Email = "jack@example.com",
                            Role = "guest",
                            UpdateDate = new DateTime(2025, 10, 24, 12, 22, 30, 259, DateTimeKind.Utc).AddTicks(6364),
                            Username = "jackomino"
                        });
                });

            modelBuilder.Entity("Bookmarks", b =>
                {
                    b.HasOne("Test0001.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test0001.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DirectorsMovies", b =>
                {
                    b.HasOne("Test0001.Models.Director", null)
                        .WithMany()
                        .HasForeignKey("DirectorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test0001.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Test0001.Models.Comment", b =>
                {
                    b.HasOne("Test0001.Models.Movie", null)
                        .WithMany("Comments")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test0001.Models.User", null)
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Test0001.Models.Movie", b =>
                {
                    b.HasOne("Test0001.Models.Category", null)
                        .WithMany("Movies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Test0001.Models.Category", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("Test0001.Models.Movie", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Test0001.Models.User", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
